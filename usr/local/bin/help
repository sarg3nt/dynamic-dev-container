#!/bin/bash
# shellcheck disable=SC1091
set -eo pipefail
IFS=$'\n\t'

# cSpell:ignore gitui,krew,kustomize,trivy,kubeseal,gping,tldr,kubesec,ncdu,btop,ipython,cmctl,cloc

#######################################
# Display container tooling information with progress indicators
# Shows installed tools, available applications, and kubectl plugins
# Reads directly from configuration files instead of waiting for installations
# Globals:
#   HOME, DEV_CONTAINER_VERSION
# Arguments:
#   None
# Outputs:
#   Formatted tool listing and installation instructions
#######################################

#######################################
# Parse TOML files to extract tools from [tools] sections
# Globals:
#   HOME
# Arguments:
#   $1 - Path to TOML file
# Returns:
#   Echoes tool names and versions
#######################################
parse_mise_tools_from_toml() {
  local toml_file="$1"
  [[ ! -f "$toml_file" ]] && return 0
  
  # Extract tools from [tools] section using awk
  awk '
    /^\[tools\]/ { in_tools = 1; next }
    /^\[/ && !/^\[tools\]/ { in_tools = 0; next }
    in_tools && /^[a-zA-Z0-9_-]+[[:space:]]*=/ {
      gsub(/[[:space:]]*=.*/, "")
      gsub(/^[[:space:]]+|[[:space:]]+$/, "")
      if ($0 != "") print $0
    }
  ' "$toml_file"
}

#######################################
# Parse shell aliases for tool shortcuts
# Extracts alias definitions from zshrc file
# Globals:
#   HOME
# Arguments:
#   None
# Returns:
#   Populates app_aliases associative array
#######################################
parse_shell_aliases() {
  if [[ -f "$HOME/.zshrc" ]]; then
    while IFS= read -r line; do
      # Skip empty lines and comments
      [[ -n "$line" && ! "$line" =~ ^[[:space:]]*# ]] || continue

      # Match alias lines: alias kc=kubectl, alias kc='kubectl', alias kc="kubectl"
      if [[ "$line" =~ ^[[:space:]]*alias[[:space:]]+([a-zA-Z0-9_]+)=[\'\"]*([a-zA-Z0-9_-]+)[\'\"]*([[:space:]]|$) ]]; then
        local alias_name="${BASH_REMATCH[1]}"
        local app_name="${BASH_REMATCH[2],,}" # Convert to lowercase

        if [[ -n "$app_name" ]]; then
          app_aliases[$app_name]="${app_aliases[$app_name]:+${app_aliases[$app_name]}, }$alias_name"
        fi
      fi
    done <"$HOME/.zshrc"
  fi
}

#######################################
# Build comprehensive utilities list from configuration files
# Combines system tools with mise-configured applications
# Globals:
#   app_aliases
# Arguments:
#   None
# Returns:
#   Sets utilities variable with formatted tool list
#######################################
build_utilities_list() {
  utilities="docker $(docker version --format '{{.Client.Version}}' 2>/dev/null || echo 'N/A') (d), git $(git --version 2>/dev/null | awk '{print $3}' || echo 'N/A') (g)"

  # Collect all mise tools from both config files
  local all_tools=""
  local workspace_path
  workspace_path="/workspaces/$(basename "$(pwd)")"
  
  # Parse global mise config
  local global_tools
  global_tools=$(parse_mise_tools_from_toml "$HOME/.config/mise/config.toml")
  
  # Parse workspace mise config
  local workspace_tools
  workspace_tools=$(parse_mise_tools_from_toml "$workspace_path/.mise.toml")
  
  # Combine and deduplicate tools
  all_tools=$(echo -e "$global_tools\n$workspace_tools" | sort -u | grep -v '^$')
  
  if [[ -n "$all_tools" ]]; then
    local tools_list=""
    while IFS= read -r tool; do
      [[ -z "$tool" ]] && continue
      local tool_lc="${tool,,}"
      local alias_str=""
      [[ -n "${app_aliases[$tool_lc]:-}" ]] && alias_str=" (${app_aliases[$tool_lc]})"
      tools_list="${tools_list:+$tools_list, }$tool$alias_str"
    done <<< "$all_tools"
    
    [[ -n "$tools_list" ]] && utilities="$utilities, $tools_list"
  fi
}

#######################################
# Display kubectl plugins from configuration
# Reads plugin list from .krew_plugins file
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Kubectl plugins section if krew is configured
#######################################
display_kubectl_plugins() {
  local workspace_path
  workspace_path="/workspaces/$(basename "$(pwd)")"
  local krew_config="$workspace_path/.krew_plugins"
  
  # Check if krew is configured in mise tools and .krew_plugins exists
  local has_krew=false
  if parse_mise_tools_from_toml "$HOME/.config/mise/config.toml" | grep -q "^krew$" || 
     parse_mise_tools_from_toml "$workspace_path/.mise.toml" | grep -q "^krew$"; then
    has_krew=true
  fi
  
  if [[ "$has_krew" == true ]] && [[ -f "$krew_config" ]]; then
    echo -e "${GREEN}**** Kubectl Plugins:${NC}"
    echo -e "${CYAN}Invoke a plugin: 'kubectl <plugin>'  List plugins: 'krew list'  To change or add to the plugin list edit the .krew_plugins file.${NC}"
    
    # Read plugins from config file
    local plugins
    plugins=$(grep -v '^#' "$krew_config" | grep -v '^[[:space:]]*$' | paste -sd, - | sed 's/,/, /g')
    
    if [[ -n "$plugins" ]]; then
      echo -e " $plugins"
    else
      echo -e " (No plugins configured in .krew_plugins)"
    fi
  fi
}

#######################################
# Main function to display container tooling information
# Orchestrates the display of all sections using configuration files
# Globals:
#   HOME, DEV_CONTAINER_VERSION, color variables
# Arguments:
#   None
# Outputs:
#   Complete tooling information display
#######################################
main() {
  # shellcheck source=/usr/bin/lib/sh/colors.sh
  source /usr/bin/lib/sh/colors.sh
  
  # Initialize global variables
  local utilities
  local -A app_aliases

  # Display header
  echo -e "${BLUE}********************************************************************"
  echo -e "              Generic Dev Container Tooling v${DEV_CONTAINER_VERSION}"
  echo -e "              Built: $(cat "$HOME/build_date.txt" 2>/dev/null || echo 'Unknown')"
  echo -e "********************************************************************${NC}"
  echo -e "${CYAN}Type \"help\" to display this message again.${NC}"
  echo -e ""

  # Parse shell aliases and build utilities list
  parse_shell_aliases
  build_utilities_list

  # Display utilities section
  echo -e "${GREEN}**** Utilities:${NC}"
  echo -e " $utilities"
  echo -e ""
  
  # Display installables section
  echo -e "${GREEN}**** Installables:${NC}"
  echo -e "${CYAN}To install vSphere PowerCLI run the below command.${NC}"
  echo -e " install_powercli"
  echo -e "${CYAN}Use 'mise' to install many other applications.${NC}"
  echo -e " List installable applications: ${BLUE}mise registry${NC}"
  echo -e " Install: ${BLUE}mise use -g argocd@latest${NC}"
  echo -e " Or add them to the .mise.toml file and run ${BLUE}mise install${NC}"
  echo -e ""

  # Display kubectl plugins if available
  display_kubectl_plugins
}

# Execute main function when script is run directly (not sourced)
if ! (return 0 2>/dev/null); then
  (main "$@")
fi
