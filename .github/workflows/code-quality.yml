name: Code Quality and Testing

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: read

jobs:
  shellcheck:
    name: Shell Script Linting
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            github.com:443

      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          scandir: "./scripts"
          additional_files: "install.sh dev.sh run.sh"
          ignore_paths: "./usr/bin/lib"
          severity: warning

      - name: Run ShellCheck on Workflow Scripts
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          scandir: "./workflow_scripts"
          severity: warning

      - name: Run ShellCheck on Usr Scripts
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          scandir: "./usr"
          severity: warning

  dockerfile-quality:
    name: Dockerfile Quality
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            github.com:443

      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Run Hadolint
        uses: hadolint/hadolint-action@54c9adbab1582c2ef04b2016b760714a4bfde3cf
        with:
          dockerfile: Dockerfile
          failure-threshold: warning

  configuration-validation:
    name: Configuration Validation
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            github.com:443

      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Validate YAML Files
        run: |
          # Install yq for YAML validation
          sudo snap install yq

          echo "Validating YAML files..."
          find . -name "*.yml" -o -name "*.yaml" | while read -r file; do
            echo "Validating $file"
            yq eval '.' "$file" > /dev/null || echo "Warning: $file may have syntax issues"
          done

      - name: Validate JSON Files
        run: |
          echo "Validating JSON files..."
          find . -name "*.json" | while read -r file; do
            echo "Validating $file"
            python -m json.tool "$file" > /dev/null || echo "Warning: $file may have syntax issues"
          done

      - name: Validate TOML Files
        run: |
          echo "Validating TOML files..."
          pip install tomli-w
          find . -name "*.toml" | while read -r file; do
            echo "Validating $file"
            python -c "import tomli_w; import sys; tomli_w.load(open(sys.argv[1], 'rb'))" "$file" 2>/dev/null || echo "Warning: $file may have syntax issues"
          done

      - name: Check for Required Files
        run: |
          echo "Checking for required files..."
          required_files=(
            "Dockerfile"
            ".mise.toml"
            "requirements.txt"
            "pyproject.toml"
            "package.json"
            ".pre-commit-config.yaml"
          )

          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists"
            else
              echo "❌ $file is missing"
            fi
          done

      - name: Validate Mise Configuration
        run: |
          echo "Validating .mise.toml configuration..."
          if [ -f ".mise.toml" ]; then
            # Check for common mise configuration issues
            echo "Checking mise configuration syntax..."
            python -c "
            import tomli_w
            try:
                config = tomli_w.load(open('.mise.toml', 'rb'))
                if 'tools' in config:
                    print(f'✅ Found {len(config[\"tools\"])} tools configured')
                else:
                    print('⚠️  No tools section found in .mise.toml')
                if 'env' in config:
                    print(f'✅ Found environment configuration')
            except Exception as e:
                print(f'❌ Error parsing .mise.toml: {e}')
            " 2>/dev/null || echo "Could not validate mise configuration"
          else
            echo "❌ .mise.toml not found"
          fi
